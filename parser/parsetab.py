
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ALPHABET ARROW CLOSE_BRACKET COLON COMMA LIST NUM OPEN_BRACKET START STATES TERM VERTEX_FROM VERTEX_TO VERTICAL_LINE WORDAutomaton : start_state\n                    | States\n                    | term_state\n                    | Alphabet\n                    | edges \n                    start_state : START ARROW NUMempty :term_state : TERM COLON OPEN_BRACKET NUM term_state_list CLOSE_BRACKET\n                 | TERM COLON OPEN_BRACKET empty CLOSE_BRACKETterm_state_list : COMMA NUM term_state_list  \n                    | emptyStates : STATES COLON OPEN_BRACKET NUM states_list CLOSE_BRACKET\n             | STATES COLON OPEN_BRACKET empty CLOSE_BRACKETstates_list : COMMA NUM states_list\n                  | emptyAlphabet : ALPHABET COLON OPEN_BRACKET WORD Words CLOSE_BRACKET\n                 | ALPHABET COLON OPEN_BRACKET empty CLOSE_BRACKETWords : COMMA WORD Words\n              | emptyedges : LIST COLON VERTEX_FROM OPEN_BRACKET VERTEX_TO WORD CLOSE_BRACKET edge_list\n          | VERTEX_FROM OPEN_BRACKET VERTEX_TO WORD CLOSE_BRACKET edge_list\n          | VERTEX_FROM emptyedge_list : VERTICAL_LINE OPEN_BRACKET VERTEX_TO WORD CLOSE_BRACKET edge_list\n                  | empty'
    
_lr_action_items = {'START':([0,],[7,]),'STATES':([0,],[8,]),'TERM':([0,],[9,]),'ALPHABET':([0,],[10,]),'LIST':([0,],[11,]),'VERTEX_FROM':([0,17,],[12,24,]),'$end':([1,2,3,4,5,6,12,19,20,37,41,45,47,48,50,52,55,57,61,63,66,67,],[0,-1,-2,-3,-4,-5,-7,-22,-6,-13,-9,-17,-7,-12,-8,-16,-21,-24,-7,-20,-7,-23,]),'ARROW':([7,],[13,]),'COLON':([8,9,10,11,],[14,15,16,17,]),'OPEN_BRACKET':([12,14,15,16,24,56,],[18,21,22,23,32,62,]),'NUM':([13,21,22,35,39,],[20,26,28,49,51,]),'VERTEX_TO':([18,32,62,],[25,46,64,]),'CLOSE_BRACKET':([21,22,23,26,27,28,29,30,31,33,34,36,38,40,42,44,49,51,53,54,58,59,60,65,],[-7,-7,-7,-7,37,-7,41,-7,45,47,48,-15,50,-11,52,-19,-7,-7,-7,61,-14,-10,-18,66,]),'WORD':([23,25,43,46,64,],[30,33,53,54,65,]),'COMMA':([26,28,30,49,51,53,],[35,39,43,35,39,43,]),'VERTICAL_LINE':([47,61,66,],[56,56,56,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Automaton':([0,],[1,]),'start_state':([0,],[2,]),'States':([0,],[3,]),'term_state':([0,],[4,]),'Alphabet':([0,],[5,]),'edges':([0,],[6,]),'empty':([12,21,22,23,26,28,30,47,49,51,53,61,66,],[19,27,29,31,36,40,44,57,36,40,44,57,57,]),'states_list':([26,49,],[34,58,]),'term_state_list':([28,51,],[38,59,]),'Words':([30,53,],[42,60,]),'edge_list':([47,61,66,],[55,63,67,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Automaton","S'",1,None,None,None),
  ('Automaton -> start_state','Automaton',1,'p_automaton','parse.py',120),
  ('Automaton -> States','Automaton',1,'p_automaton','parse.py',121),
  ('Automaton -> term_state','Automaton',1,'p_automaton','parse.py',122),
  ('Automaton -> Alphabet','Automaton',1,'p_automaton','parse.py',123),
  ('Automaton -> edges','Automaton',1,'p_automaton','parse.py',124),
  ('start_state -> START ARROW NUM','start_state',3,'p_start_state','parse.py',127),
  ('empty -> <empty>','empty',0,'p_empty','parse.py',131),
  ('term_state -> TERM COLON OPEN_BRACKET NUM term_state_list CLOSE_BRACKET','term_state',6,'p_term_state','parse.py',134),
  ('term_state -> TERM COLON OPEN_BRACKET empty CLOSE_BRACKET','term_state',5,'p_term_state','parse.py',135),
  ('term_state_list -> COMMA NUM term_state_list','term_state_list',3,'p_term_state_list','parse.py',140),
  ('term_state_list -> empty','term_state_list',1,'p_term_state_list','parse.py',141),
  ('States -> STATES COLON OPEN_BRACKET NUM states_list CLOSE_BRACKET','States',6,'p_states','parse.py',146),
  ('States -> STATES COLON OPEN_BRACKET empty CLOSE_BRACKET','States',5,'p_states','parse.py',147),
  ('states_list -> COMMA NUM states_list','states_list',3,'p_states_list','parse.py',162),
  ('states_list -> empty','states_list',1,'p_states_list','parse.py',163),
  ('Alphabet -> ALPHABET COLON OPEN_BRACKET WORD Words CLOSE_BRACKET','Alphabet',6,'p_alphabet','parse.py',177),
  ('Alphabet -> ALPHABET COLON OPEN_BRACKET empty CLOSE_BRACKET','Alphabet',5,'p_alphabet','parse.py',178),
  ('Words -> COMMA WORD Words','Words',3,'p_words','parse.py',184),
  ('Words -> empty','Words',1,'p_words','parse.py',185),
  ('edges -> LIST COLON VERTEX_FROM OPEN_BRACKET VERTEX_TO WORD CLOSE_BRACKET edge_list','edges',8,'p_edges','parse.py',191),
  ('edges -> VERTEX_FROM OPEN_BRACKET VERTEX_TO WORD CLOSE_BRACKET edge_list','edges',6,'p_edges','parse.py',192),
  ('edges -> VERTEX_FROM empty','edges',2,'p_edges','parse.py',193),
  ('edge_list -> VERTICAL_LINE OPEN_BRACKET VERTEX_TO WORD CLOSE_BRACKET edge_list','edge_list',6,'p_edge_list','parse.py',228),
  ('edge_list -> empty','edge_list',1,'p_edge_list','parse.py',229),
]
